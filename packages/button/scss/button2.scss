@import "variables";

@function deep-map-get ($map, $keys...) {
    @if type-of($map) != 'map' {
      @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
    }
  
    @each $key in $keys {
      $map: map-get($map, $key);
    }
  
    @return $map;
}

@mixin render-ratio-props($state, $color-ratios) {
    background-color: hsl(
      var(--bs-button-h),
      calc(var(--bs-button-s) * 1%),
      calc(
        calc(var(--bs-button-l) * 1%) -
        var(--bs-button-#{$state}-background-ratio, #{map-get(map-get($color-ratios, $state), "background")})
      )
    );
    border-color: hsl(
      var(--bs-button-h),
      var(--bs-button-s),
      calc(
        var(--bs-button-l) -
        var(--bs-button-#{$state}-border-ratio, #{map-get(map-get($color-ratios, $state), "border")})
      )
    );
}

@mixin render-contrast-color() {
  //https://css-tricks.com/switch-font-color-for-different-backgrounds-with-css/
  //https://codepen.io/depoulo/pen/WLGeQz

  //1) Any lightness value bellow the threshold will result in white, any above will result in black
  --threshold: 65;
  --switch: calc((var(--bs-button-l) - var(--threshold)) * -100%);
  color: hsl(0, 0%, var(--switch));
}

@mixin render-contrast-color2() {
   //note this method incorrectly uses black for some colors unless their "L" value is adjusted a bit
   --contrast-ratio: 25;
   /* The foreground color with contrast adjuster. */
    --bs-button-contrast: hsl(
      var(--bs-button-h),
      calc(var(--bs-button-s) * 1%),
      calc(
        (-2500 * (var(--contrast-ratio) * 1% / 100 + 1%)) /
          (var(--bs-button-l) - 49.999) +
          var(--bs-button-l) *
          1%
      )
    );
  color: var(--bs-button-contrast);
}

@mixin render-button-core($color-ratios) {

  :host .btn {
    //color: var(--bs-button-color, #fff);
    @include render-contrast-color2();
    background-color: hsl(var(--bs-button-h), calc( var(--bs-button-s) * 1% ), calc( var(--bs-button-l) * 1%));
    border-color: hsl(var(--bs-button-h), calc( var(--bs-button-s) * 1% ), calc( var(--bs-button-l) * 1%));
    --outline-color: hsla(var(--bs-button-h), calc( var(--bs-button-s) * 1% ), calc( var(--bs-button-l) * 1%), .5);
  }

  :host .btn:hover {
    color: var(--bs-button-color, #fff);
    @include render-ratio-props("hover", $color-ratios);
  }

  :host .btn:focus {
    color: var(--bs-button-color, #fff);
    @include render-ratio-props("focus", $color-ratios);
    box-shadow: 0 0 0 
    var(--bs-button-outline-width, 2px)
    var(--outline-color);
  }

  :host .btn:active {
    color: var(--bs-button-color, #fff);
    @include render-ratio-props("active", $color-ratios);
  }

}

@mixin render-button-theme($theme, $values, $color-ratios) {

  :host([#{$theme}]) .btn {
    --bs-button-h: var(--bs-button-#{$theme}-h, #{deep-map-get($values, "hsl", "h")});
    --bs-button-s: var(--bs-button-#{$theme}-s, #{deep-map-get($values, "hsl", "s")});
    --bs-button-l: var(--bs-button-#{$theme}-l, #{deep-map-get($values, "hsl", "l")});
  }

}

@mixin render-button-size($size, $values) {
  :host([#{$size}]) .btn {
    @include button-size(
      map-get($values, "py"),
      map-get($values, "px"),
      map-get($values, "fontSize"),
      map-get($values, "borderRadius")
    );
  }
}

// baseline from bootstrap
@import "button-base";

:host {
  outline: none;
  display: inline-block;
}

@include render-button-core($button-color-ratios);

// themes
@each $theme, $values in $button-themes {
  @include render-button-theme($theme, $values, $button-color-ratios);
};

//sizes
@each $size, $values in $button-sizes {
  @include render-button-size($size, $values);
};

//block
:host([block]) {
  display: block;
  width: 100%;

  & .btn {
    display: block;
    width: 100%;
  }
}

//disabled
:host([disabled]) {
  pointer-events: none;
  opacity: .65;
}